DECLARE SUB TEXT (A$, X%, Y%, SC%)
DECLARE SUB TOPPLAY (A%)
DECLARE SUB GETWORD (Y%, X%, CT%, C$)
DECLARE SUB CYCLE ()
DECLARE SUB OPN (F$)
DECLARE SUB PT (X1%, Y1%, S%())
DECLARE SUB PAUS ()
DECLARE SUB PALD (C%)
DECLARE SUB DISPLAY ()
DECLARE SUB PAL (C%, C1%, C2%, C3%)
DECLARE SUB PUTC (X1%, Y1%, S%())
DECLARE SUB PUTB (X1%, Y1%)
DECLARE SUB PUTS (X1%, Y1%, S%())
DECLARE SUB GETS (X1%, Y1%, X2%, Y2%, S%())
COMMON SHARED coin AS INTEGER
COMMON SHARED LIFE AS INTEGER
DEFINT A-Z
'ON ERROR GOTO EXT
CLS
DIM CTA(50)
FOR E = 1 TO 50: CTA(E) = INT(RND * 3) + 1: NEXT E
SCREEN 0
WIDTH 80, 25
COLOR 14, 1: LOCATE 1, 1: A$ = "SPINBALL BETA ver 2.5 startup"
LOCATE 1, 1: PRINT SPACE$(80): LOCATE 1, 40 - (LEN(A$) / 2): PRINT A$
COLOR 7, 0
PRINT
PRINT
PRINT "Reading Arguments.."
C$ = UCASE$(COMMAND$)
IF INSTR(C$, "NOBLOOD") > 0 THEN NBLD = 1: PRINT : BEEP: PRINT "NOBLOOD - Bloodless game"
IF INSTR(C$, "?") > 0 THEN PRINT "- NOBLOOD   for bloodless play.": END
SLEEP 2
SCREEN 13
DEF SEG = &HA000
DIM C1(18 TO 31), C2(18 TO 31), C3(18 TO 31)
DIM KX(100), KY(100)
OPEN "COOLMOVE.DAT" FOR INPUT AS #1
INPUT #1, KCX, KCY
CT = 0
WHILE NOT EOF(1)
CT = CT + 1: INPUT #1, KX(CT), KY(CT)
WEND
FOR E = CT TO 1 STEP -1: CT = CT + 1: KX(CT) = -KX(E): KY(CT) = -KY(E): NEXT E
TOTCT = CT
CT = 0
FOR C = 18 TO 31
OUT &H3C7, C
C1(C) = INP(&H3C9)
C2(C) = INP(&H3C9)
C3(C) = INP(&H3C9)
PALETTE C, 0
NEXT C
BLOAD "ECG.DAT", 320 * 70 + 80

FOR T! = 0 TO 1 STEP .05
FOR C = 18 TO 31
OUT &H3C8, C: OUT &H3C9, C1(C) * T!: OUT &H3C9, C2(C) * T!: OUT &H3C9, C3(C) * T!
NEXT C
PAUS
NEXT T!
SLEEP 2

FOR T! = 1 TO 0 STEP -.05
FOR C = 18 TO 31
OUT &H3C8, C: OUT &H3C9, C1(C) * T!: OUT &H3C9, C2(C) * T!: OUT &H3C9, C3(C) * T!
NEXT C
PAUS
NEXT T!

FOR E = 1 TO 254: PAL E, 0, 0, 0: NEXT
COLOR 255: LOCATE 12, 15: PRINT "LOADING.."
FOR E = 0 TO 50 STEP 2: PAL 255, E, E, E: PAUS: NEXT

D = 258: LIFE = 3
DIM B1(D), B2(D), B3(D), B4(D), B5(D), R1(D), R2(D), L1(D), L2(D), J1(D), J2(D), ZR1(D), ZR2(D), ZL1(D), ZL2(D), BS(D), BO(D), BI(D), BE(D), BD(D), BG(D), BGB(D), H1(D), H2(D), H3(D), H4(D), LF$(10), BW(D), EP1(D), EP2(D), ES1(D), ES2(D), ED1(D),  _
ED2(D), ED3(D), ED4(D), ED5(D)
DIM BL1(D), BL2(D), BL3(D), BL4(D), BL5(D), BL6(D), LF(D), MS1(D), MS2(D), MS3(D), MS4(D), MS5(D), MS6(D), SOF(D), SON(D), E2A(D), E2B(D), E2C(D), EDA(D), EDB(D)
X = 0: Y = 0

OPN "WADLEV.PAK"
D = 0
WHILE NOT EOF(1)
D = D + 1: INPUT #1, LF$(D)
WEND
LF$(0) = "MAINMENU.PAK": FR = 8
CLOSE
OPEN "BLOOD.QPC" FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, BL1()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, BL2()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, BL3()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, BL4()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, BL5()
    IF ZZ = 6 THEN GETS 1, 1, 16, 16, BL6()
    NEXT ZZ
CLOSE
OPEN "ENEMY2.QPC" FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, E2A()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, E2B()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, E2C()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, EDA()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, EDB()
    NEXT ZZ


CLOSE
OPEN "FLING.QPC" FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, MS1()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, MS2()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, MS3()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, MS4()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, MS5()
    IF ZZ = 6 THEN GETS 1, 1, 16, 16, MS6()
    NEXT ZZ

CLOSE
OPEN "SWITCH.QPC" FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, SOF()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, SON()
    NEXT ZZ


CLOSE
OPEN "BACKF.QPC" FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, B1()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, B2()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, B3()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, B4()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, B5()
    IF ZZ = 6 THEN GETS 1, 1, 16, 16, BE()
    IF ZZ = 7 THEN GETS 1, 1, 16, 16, BG()
    IF ZZ = 8 THEN GETS 1, 1, 16, 16, BGB()
    'IF ZZ = 9 THEN GETS 1, 1, 16, 16, BH()
    IF ZZ = 10 THEN GETS 1, 1, 16, 16, BW()
    IF ZZ = 11 THEN GETS 1, 1, 16, 16, LF()
    NEXT ZZ

CLOSE
OPEN "SPRITES.QPC" FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, R1()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, R2()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, L1()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, L2()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, J1()
    IF ZZ = 6 THEN GETS 1, 1, 16, 16, J2()
    IF ZZ = 7 THEN GETS 1, 1, 16, 16, ZR1()
    IF ZZ = 8 THEN GETS 1, 1, 16, 16, ZR2()
    IF ZZ = 9 THEN GETS 1, 1, 16, 16, ZL1()
    IF ZZ = 10 THEN GETS 1, 1, 16, 16, ZL2()
    IF ZZ = 11 THEN GETS 1, 1, 16, 16, BS()
    IF ZZ = 12 THEN GETS 1, 1, 16, 16, BO()
    IF ZZ = 13 THEN GETS 1, 1, 16, 16, BI()
    IF ZZ = 14 THEN GETS 1, 1, 16, 16, BD()
    IF ZZ = 15 THEN GETS 1, 1, 16, 16, H1()
    IF ZZ = 16 THEN GETS 1, 1, 16, 16, H2()
    IF ZZ = 17 THEN GETS 1, 1, 16, 16, H3()
    IF ZZ = 18 THEN GETS 1, 1, 16, 16, H4()
    NEXT ZZ

CLOSE
OPEN "DUDEGEM.QPC" FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, EP1()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, EP2()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, ES1()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, ES2()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, ED1()
    IF ZZ = 6 THEN GETS 1, 1, 16, 16, ED2()
    IF ZZ = 7 THEN GETS 1, 1, 16, 16, ED3()
    IF ZZ = 8 THEN GETS 1, 1, 16, 16, ED4()
    IF ZZ = 9 THEN GETS 1, 1, 16, 16, ED5()
    NEXT ZZ
CLS
PAL 200, 63, 40, 40: COLOR 200
IF LEV > 3 THEN LEV = 3
TBLD = 5: TT = 9
TRYAG:
REDIM FGS(0, 0)
PLAY "MBT255L64"
T = 0: SM = 1
CLOSE
IF LEV = 8 THEN GOTO SKIP
OPN LF$(LEV)
INPUT #1, SX, SY
INPUT #1, TX, TY, LX, LY
REDIM LV(TY, TX)
FOR E = 1 TO TY
INPUT #1, A$
FOR T = 1 TO TX
LV(E, T) = 0
B$ = MID$(A$, T, 1): IF B$ = "B" THEN LV(E, T) = 1
IF B$ = "G" THEN LV(E, T) = 2
IF B$ = "L" THEN LV(E, T) = 5
IF B$ = "T" THEN LV(E, T) = 3
IF B$ = "+" THEN LV(E, T) = 50
IF B$ = "O" THEN LV(E, T) = 51
IF B$ = "E" THEN LV(E, T) = 6
IF B$ = "=" THEN LV(E, T) = 99
IF B$ = "b" THEN LV(E, T) = 61
IF B$ = "°" THEN LV(E, T) = 60
IF B$ = "-" THEN LV(E, T) = 10
IF B$ = "W" THEN LV(E, T) = 62
IF B$ = "#" THEN LV(E, T) = 80
IF B$ = "@" THEN LV(E, T) = 81
IF B$ = "H" THEN LV(E, T) = 63
IF B$ = "*" THEN LV(E, T) = 64
IF B$ = "/" THEN LV(E, T) = 8
IF B$ = "\" THEN LV(E, T) = 9
IF B$ = "|" THEN LV(E, T) = 601

NEXT T, E
IF LEV = 5 THEN
MS(1) = -1: MSX(1) = 20: MSY(1) = 43: MSC = 1: TEC = 5
MS(2) = -1: MSX(2) = 23: MSY(2) = 39
MS(3) = -1: MSX(3) = 50: MSY(3) = 43
MS(4) = -1: MSX(4) = 90: MSY(4) = 33
MS(5) = -1: MSX(5) = 116: MSY(5) = 35
END IF

IF LEV = 6 THEN
MS(1) = -1: MSX(1) = 60: MSY(1) = 23: MSC = 1: TEC = 5
MS(2) = -1: MSX(2) = 82: MSY(2) = 21
MS(3) = -1: MSX(3) = 84: MSY(3) = 16
MS(4) = -1: MSX(4) = 82: MSY(4) = 24
MS(5) = -1: MSX(5) = 80: MSY(5) = 40
END IF

IF LEV = 7 THEN
MS(1) = -1: MSX(1) = 54: MSY(1) = 9: MSC = 1: TEC = 5
MS(2) = -1: MSX(2) = 35: MSY(2) = 10
MS(3) = -1: MSX(3) = 17: MSY(3) = 13
MS(4) = -1: MSX(4) = 49: MSY(4) = 18
MS(5) = -1: MSX(5) = 52: MSY(5) = 18
END IF


IF LEV = 5 OR LEV = 6 OR LEV = 7 THEN
REDIM FGS(209, 112)
CLOSE : OPEN "STARS.DAT" FOR BINARY AS #1 LEN = 1
C$ = SPACE$(1)
FOR Y = 1 TO 112: FOR X = 1 TO 209
GET #1, , C$
FGS(X, Y) = ASC(C$): C$ = SPACE$(1)
NEXT X, Y
CLOSE #1
END IF
SKIP:
CLS
PAL 15, 63, 63, 63: PAL 14, 63, 20, 20
COLOR 15
'                    "           "
IF LEV > 0 THEN LOCATE 13, 14: PRINT "  Level" + STR$(LEV)
'                     "               "
COLOR 14: LOCATE 15, 12
IF LEV = 1 THEN PRINT "Escape part 1/3"
IF LEV = 2 THEN PRINT "Escape part 2/3"
IF LEV = 3 THEN PRINT "Escape part 3/3"
IF LEV = 4 THEN PRINT " Crystal Waters"
IF LEV = 5 THEN PRINT "Rescue part 1/3"
IF LEV = 6 THEN PRINT "Rescue part 2/3"
IF LEV = 7 THEN PRINT "Rescue part 3/3"
IF LEV = 8 THEN PRINT "  The Rescue!  "
IF LEV > 0 THEN SLEEP 3
CLS
IF LEV = 8 THEN GOTO INTERM
T = 0: T1 = 0: ITONA = 0: ITONB = 0
BLOAD "GAMEBACK.DAT"
PALETTE
FOR E = 160 TO 164: PAL E, 63, 20 + ((E - 159) * 3), 0: NEXT E
IF LEV = 5 OR LEV = 6 OR LEV = 7 THEN FOR E = 160 TO 164: PALETTE E, (28 + ((E - 159) * 7)) * 65536: NEXT E
NODI = 20
C(0) = 30
C(1) = 63
DISPLAY
EAL = 0': NOMOV = 0
DO
DEF SEG = 0
COLOR 2
D:
IF PEEK(1132) < 1 THEN GOTO D
POKE (1132), 0
IF LEV = 0 THEN
SELECT CASE SX
CASE 1 TO 4         '12345678901234567890
LOCATE 18, 6: PRINT "   Start new game  "
CASE 6 TO 8
LOCATE 18, 6: PRINT " Enter a C00L code "
CASE 10 TO 12
LOCATE 18, 6: PRINT "Instructions-=-help"
CASE 14 TO 16
LOCATE 18, 6: PRINT "View -=Top Player=-"
CASE 18 TO 21
LOCATE 18, 6: PRINT " Get outa here!! :("
END SELECT
END IF
I$ = INKEY$
        ' CYCLE LAVA
CYCLE
IF LEV = 6 AND (ITONA + ITONB) > 0 AND (ITONA + ITONB) < 6 THEN
KCCT = KCCT + 1: IF KCCT > TOTCT THEN KCCT = 1
LV(KCY, KCX) = 60
KCX = KCX + KX(KCCT): KCY = KCY + KY(KCCT)
LV(KCY, KCX) = 70
END IF

IF LEV = 5 OR LEV = 6 OR LEV = 7 THEN
MSC = MSC + 1: IF MSC = 11 THEN MSC = 1
FOR E = 1 TO TEC
IF MSC < 4 THEN LV(MSY(E), MSX(E)) = 601
IF MSC = 4 OR MSC = 5 THEN LV(MSY(E), MSX(E)) = 602
IF MSC = 6 OR MSC = 7 THEN LV(MSY(E), MSX(E)) = 603
IF MSC = 8 THEN LV(MSY(E), MSX(E)) = 604
IF MSC = 9 THEN
LV(MSY(E), MSX(E)) = 60: MSX(E) = MSX(E) + MS(E): IF LV(MSY(E), MSX(E)) <> 60 THEN MSX(E) = MSX(E) - MS(E): MS(E) = -MS(E)
LV(MSY(E), MSX(E)) = 605
END IF
IF MSC = 10 THEN LV(MSY(E), MSX(E)) = 606
NEXT E
END IF

IF I$ = CHR$(0) + ";" AND EXL = 0 AND DEATH = 0 THEN BLOAD "HELP.DAT": SLEEP: BLOAD "GAMEBACK.DAT": DISPLAY
N = N + 1: IF N > 1 THEN N = 0: N2 = N2 + 1: IF N2 > 1 THEN N2 = 0
IF NODI > 0 THEN
NODI = NODI - 1: IF DEATH = 0 THEN PAL 9, C(N), C(N), C(N)
IF NODI = 0 THEN PAL 9, 0, 15, 63
END IF
IF NOMOV > 0 THEN
JP = 0: GOTO CNT
END IF
IF (PEEK(1047) AND 8) = 8 THEN SM = 0: T = T + 1: IF T > TT THEN T = TT
IF (PEEK(1047) AND 4) = 4 THEN SM = 1: T = T - 1: IF T < -TT THEN T = -TT
JP = (PEEK(1047) AND 1): IF (PEEK(1047) AND 2) = 2 THEN JP = 1
IF JP = 0 THEN JBD = 0
CNT:
IF I$ = "K" THEN IF KILLIT = 0 THEN KILLIT = 1 ELSE KILLIT = 0
IF ((PEEK(1047) AND 8) + (PEEK(1047) AND 4) = 0) OR NOMOV > 0 OR (T1 <> 0 AND N = 0 AND ABS(T) < 9) OR (N = 0 AND LEV = 4) THEN
IF NOMOV = 0 THEN
IF T > 0 THEN T = T - 1
IF T < 0 THEN T = T + 1
ELSE
IF T > 0 AND N = 0 THEN T = T - 1
IF T < 0 AND N = 0 THEN T = T + 1
END IF
END IF
IF T <> 0 OR T1 <> 0 OR J > 0 THEN SN = SN + 1: IF SN > 1 THEN SN = 0
DEF SEG = &HA000
BC = C: BC1 = C1: BSX = SX: BSY = SY
IF KILLIT > 0 THEN
IF KILLIT = 1 THEN LV(KCY, KCX) = 60: LV(27, 101) = 60 ELSE IF KILLIT = 2 THEN LV(27, 102) = 60 ELSE IF KILLIT = 3 THEN LV(27, 103) = 60
IF KILLIT = 10 THEN LV(43, 77) = 60: FOR E = 160 TO 164: PAL E, 63, 20 + ((E - 159) * 3), 0: NEXT E
IF KILLIT = 11 THEN LV(43, 88) = 60
IF KILLIT = 12 THEN FOR E = 160 TO 164: PAL E, 0, 0, (28 + ((E - 159) * 7)): NEXT E
IF KILLIT = 20 THEN LV(42, 77) = 60: FOR E = 160 TO 164: PAL E, 63, 20 + ((E - 159) * 3), 0: NEXT E
IF KILLIT = 21 THEN LV(42, 88) = 60
IF KILLIT = 22 THEN FOR E = 160 TO 164: PAL E, 0, 0, (28 + ((E - 159) * 7)): NEXT E
IF KILLIT = 40 THEN LV(41, 77) = 60
IF KILLIT = 41 THEN LV(41, 88) = 60
IF KILLIT < 10 THEN LV(40, 77) = 61: LV(40, 88) = 61
IF KILLIT = 31 THEN FOR E = 160 TO 164: PAL E, 63, 20 + ((E - 159) * 3), 0: NEXT E
IF KILLIT < 50 THEN IF (KILLIT AND 1) = 1 THEN C = C + CTA(KILLIT) ELSE C = C - CTA(KILLIT)
KILLIT = KILLIT + 1
END IF
C = C + T: IF C > 15 THEN C = C - 16: SX = SX - 1 ELSE IF C < 0 THEN C = 16 + C: SX = SX + 1
C1 = C1 + T1: IF C1 > 15 THEN C1 = C1 - 16: SY = SY - 1 ELSE IF C1 < 0 THEN C1 = 16 + C1: SY = SY + 1
IF SX < 1 OR SX > LX THEN C = BC: SX = BSX: T = 0
IF SY < 1 OR SY > LY THEN C1 = BC1: SY = BSY: T1 = 0
Z = LV(SY + 4, SX + 7)
IF Z > 0 AND Z < 50 THEN C = BC: SX = BSX: T = 0
IF C1 = 0 THEN ZD = LV(SY + 5, SX + 7) ELSE ZD = LV(SY + 4, SX + 7)
IF (ZD = 3 OR ZD = 5) AND NOMOV <> 0 AND T > -3 THEN T = T - 1
IF J = 0 AND (ZD > 0 AND ZD < 50) AND JP = 1 AND JBD = 0 THEN J = 13: JBD = 1: IF LEV = 4 THEN J = 22': PLAY "MBL64T255O1EFO2AFBO3CDFAB"
IF J = 0 THEN IF (ZD > 0 AND ZD < 50) THEN T1 = 0: C1 = 0 ELSE T1 = -FR
IF J > 0 THEN
J = J - 1
IF C1 = 15 THEN ZJ = LV(SY + 3, SX + 7) ELSE ZJ = LV(SY + 3, SX + 7)
IF ZJ = 0 OR ZJ > 49 THEN T1 = FR ELSE T1 = 0: J = -1
IF J > -1 AND J < 4 THEN T1 = 0
IF JP = 0 THEN J = -1 ELSE IF J = 0 THEN J = -1
END IF
IF ZD = 80 AND DEATH = 0 AND NOMOV = 0 THEN J = 5: T1 = FR: PAL 0, 63, 10, 10:  ELF = ELF - 1: PLAY "MBL64T255O4BGEAO3BGEO2CDCDFO1CDCDEO0CBFAC": IF ELF = 0 THEN EAL = -1: LV(EAY, EAX) = 83 ELSE T = -ESD * 10
IF SY > 25 AND SX > 127 AND EAL = 0 THEN
IF LEV = 3 THEN EAL = 15: ESD = -1: EA = 1: EAX = 140: EAY = 30: LV(EAY, EAX) = 80: ELF = 5
END IF
IF EAL < 0 THEN
IF EAL = -1 THEN LV(EAY, EAX) = 83
IF EAL = -2 THEN LV(EAY, EAX) = 84
IF EAL = -3 THEN LV(EAY, EAX) = 83
IF EAL = -4 THEN LV(EAY, EAX) = 84: PAL 0, 0, 0, 0
IF EAL = -5 THEN LV(EAY, EAX) = 83
IF EAL = -6 THEN LV(EAY, EAX) = 84
IF EAL = -7 THEN LV(EAY, EAX) = 85
IF EAL = -8 THEN LV(EAY, EAX) = 86
IF EAL = -9 THEN LV(EAY, EAX) = 85
IF EAL = -10 THEN LV(EAY, EAX) = 86
IF EAL = -11 THEN LV(EAY, EAX) = 87
IF N2 = 0 THEN EAL = EAL - 1
END IF

IF EAL > 0 THEN
EAL = EAL - 1
IF EA = 1 THEN IF EAL = 0 THEN EAL = 15: EA = 2: LV(EAY, EAX) = 60: IF INT(RND * 5) + 1 = 3 THEN EA = 3: ESDY = -1
IF EA = 2 THEN
LV(EAY, EAX) = 60: PAL 0, 0, 0, 0
EAX = EAX + ESD: IF LV(EAY, EAX) = 1 OR LV(EAY, EAX) = 6 THEN EAX = EAX - ESD
LV(EAY, EAX) = 81
IF EAL = 0 THEN ESD = -ESD: LV(EAY, EAX) = 80: EA = 1: EAL = 16
END IF
IF EA = 3 THEN
LV(EAY, EAX) = 60: PAL 0, 0, 0, 0
EAY = EAY + ESDY: IF LV(EAY, EAX) = 1 OR LV(EAY, EAX) = 6 THEN EAY = EAY - ESDY: ESDY = -ESDY: IF ESDY = -1 THEN ESDY = 0
LV(EAY, EAX) = 81
IF EAL = 0 THEN LV(EAY, EAX) = 80: EA = 1: EAL = 12
END IF
END IF

IF NBLD = 0 OR LEV = 4 THEN
FOR E = 1 TO TBLD
 IF BLC(E) > 0 THEN
 IF N = 0 THEN BLC(E) = BLC(E) + 1: LV(BLY(E), BLX(E)) = 100 + BLC(E)
 IF BLC(E) = 7 THEN BLC(E) = 0: LV(BLY(E), BLX(E)) = 60
 ELSE
  IF MNB = 1 AND (T1 <> 0 OR T <> 0) AND LV(SY + 4, SX + 7) = 60 THEN
  BLY(E) = SY + 4: BLX(E) = SX + 7: BLC(E) = 1: LV(BLY(E), BLX(E)) = 100 + BLC(E)
  END IF
 END IF
NEXT E
END IF



WAIT 938, 8
TY = SY: FOR Y = C1 TO C1 + (16 * 7) STEP 16
TX = SX
FOR X = C TO C + (16 * 13) STEP 16

IF TX = SX OR TY = SY OR TX = SX + 13 OR TY = SY + 7 THEN
IF LV(TY, TX) = 1 THEN PUTS X, Y, B1() ELSE IF LV(TY, TX) = 60 THEN PUTS X, Y, BG() ELSE IF LV(TY, TX) = 2 THEN PUTS X, Y, B2() ELSE IF LV(TY, TX) = 5 THEN PUTS X, Y, B5() ELSE IF LV(TY, TX) = 50 THEN PUTS X, Y, BS() ELSE IF LV(TY, TX) = 61 THEN  _
PUTS X, Y, BGB()
IF LV(TY, TX) = 3 THEN IF N = 0 THEN PUTS X, Y, B3() ELSE PUTS X, Y, B4()
IF LV(TY, TX) = 51 THEN IF N2 = 0 THEN PUTS X, Y, BO() ELSE PUTS X, Y, BI()
IF LV(TY, TX) = 80 THEN IF N2 = 0 THEN PUTS X, Y, EP1() ELSE PUTS X, Y, EP2()
IF LV(TY, TX) = 81 THEN IF N = 0 THEN PUTS X, Y, ES1() ELSE PUTS X, Y, ES2()
IF LV(TY, TX) = 6 THEN PUTS X, Y, BE() ELSE IF LV(TY, TX) = 99 THEN PUTS X, Y, BD() ELSE IF LV(TY, TX) = 62 THEN PUTS X, Y, BW() ELSE IF LV(TY, TX) = 63 THEN PUTS X, Y, LF()
IF LV(TY, TX) > 82 THEN IF LV(TY, TX) = 83 THEN PUTS X, Y, ED1() ELSE IF LV(TY, TX) = 84 THEN PUTS X, Y, ED2() ELSE IF LV(TY, TX) = 85 THEN PUTS X, Y, ED3() ELSE IF LV(TY, TX) = 86 THEN PUTS X, Y, ED4() ELSE IF LV(TY, TX) = 87 THEN PUTS X, Y, ED5()
IF LV(TY, TX) = 601 THEN PUTS X, Y, MS1() ELSE IF LV(TY, TX) = 602 THEN PUTS X, Y, MS2() ELSE IF LV(TY, TX) = 603 THEN PUTS X, Y, MS3() ELSE IF LV(TY, TX) = 604 THEN PUTS X, Y, MS4() ELSE IF LV(TY, TX) = 605 THEN PUTS X, Y, MS5() ELSE IF LV(TY, TX)  _
= 606 THEN PUTS X, Y, MS6()
IF LV(TY, TX) = 64 THEN PUTS X, Y, SOF() ELSE IF LV(TY, TX) = 65 THEN PUTS X, Y, SON() ELSE IF LV(TY, TX) = 8 THEN PUTS X, Y, E2A() ELSE IF LV(TY, TX) = 9 THEN PUTS X, Y, E2B() ELSE IF LV(TY, TX) = 70 THEN PUTS X, Y, E2C() ELSE IF LV(TY, TX) = 11  _
THEN PUTS X, Y, EDA() ELSE IF LV(TY, TX) = 12 THEN PUTS X, Y, EDB()
IF LV(TY, TX) = 0 THEN
Y1 = 320 * Y
FOR E = Y TO Y + 15
FOR X1 = X TO X + 15
IF X1 > 14 AND X1 < 224 AND E > 15 AND E < 128 THEN POKE Y1 + X1, FGS(X1 - 14, E - 15)
NEXT X1
Y1 = Y1 + 320: NEXT E
END IF

IF LV(TY, TX) > 100 AND LV(TY, TX) < 107 THEN
SELECT CASE LV(TY, TX)
CASE 101
PUTS X, Y, BL1()
CASE 102
PUTS X, Y, BL2()
CASE 103
PUTS X, Y, BL3()
CASE 104
PUTS X, Y, BL4()
CASE 105
PUTS X, Y, BL5()
CASE 106
PUTS X, Y, BL6()
END SELECT
END IF

ELSE

IF LV(TY, TX) = 1 THEN PT X, Y, B1() ELSE IF LV(TY, TX) = 60 THEN PT X, Y, BG() ELSE IF LV(TY, TX) = 2 THEN PT X, Y, B2() ELSE IF LV(TY, TX) = 5 THEN PT X, Y, B5() ELSE IF LV(TY, TX) = 50 THEN PT X, Y, BS()
IF LV(TY, TX) = 3 THEN IF N = 0 THEN PT X, Y, B3() ELSE PT X, Y, B4() ELSE IF LV(TY, TX) = 61 THEN PT X, Y, BGB()
IF LV(TY, TX) = 51 THEN IF N2 = 0 THEN PT X, Y, BO() ELSE PT X, Y, BI()
IF LV(TY, TX) = 80 THEN IF N2 = 0 THEN PT X, Y, EP1() ELSE PT X, Y, EP2()
IF LV(TY, TX) = 81 THEN IF N = 0 THEN PT X, Y, ES1() ELSE PT X, Y, ES2()
IF LV(TY, TX) = 6 THEN PT X, Y, BE() ELSE IF LV(TY, TX) = 99 THEN PT X, Y, BD() ELSE IF LV(TY, TX) = 62 THEN PT X, Y, BW() ELSE IF LV(TY, TX) = 63 THEN PUTS X, Y, LF()
IF LV(TY, TX) > 82 THEN IF LV(TY, TX) = 83 THEN PT X, Y, ED1() ELSE IF LV(TY, TX) = 84 THEN PT X, Y, ED2() ELSE IF LV(TY, TX) = 85 THEN PT X, Y, ED3() ELSE IF LV(TY, TX) = 86 THEN PT X, Y, ED4() ELSE IF LV(TY, TX) = 87 THEN PT X, Y, ED5()
IF LV(TY, TX) = 601 THEN PT X, Y, MS1() ELSE IF LV(TY, TX) = 602 THEN PT X, Y, MS2() ELSE IF LV(TY, TX) = 603 THEN PT X, Y, MS3() ELSE IF LV(TY, TX) = 604 THEN PT X, Y, MS4() ELSE IF LV(TY, TX) = 605 THEN PT X, Y, MS5() ELSE IF LV(TY, TX) = 606 THEN _
 PT X, Y, MS6()
IF LV(TY, TX) = 64 THEN PT X, Y, SOF() ELSE IF LV(TY, TX) = 65 THEN PT X, Y, SON() ELSE IF LV(TY, TX) = 8 THEN PT X, Y, E2A() ELSE IF LV(TY, TX) = 9 THEN PT X, Y, E2B() ELSE IF LV(TY, TX) = 70 THEN PT X, Y, E2C() ELSE IF LV(TY, TX) = 11 THEN PT X, Y _
, EDA() ELSE IF LV(TY, TX) = 12 THEN PT X, Y, EDB()
IF LV(TY, TX) = 0 THEN
Y1 = 320 * Y
FOR E = Y TO Y + 15
FOR X1 = X TO X + 15: POKE Y1 + X1, FGS(X1 - 14, E - 15): NEXT X1
Y1 = Y1 + 320: NEXT E
END IF
IF LV(TY, TX) > 100 AND LV(TY, TX) < 107 THEN
SELECT CASE LV(TY, TX)
CASE 101
PT X, Y, BL1()
CASE 102
PT X, Y, BL2()
CASE 103
PT X, Y, BL3()
CASE 104
PT X, Y, BL4()
CASE 105
PT X, Y, BL5()
CASE 106
PT X, Y, BL6()
END SELECT
END IF



IF TX = SX + 7 AND TY = SY + 4 THEN
IF NOMOV > 0 THEN
NOMOV = NOMOV - 1
IF NOMOV = 0 AND LEV <> 4 THEN MNB = 0
IF NOMOV > 16 THEN PUTC 115, 64, H1() ELSE IF NOMOV > 12 THEN PUTC 115, 64, H2()
IF NOMOV < 13 THEN IF N = 0 THEN PUTC 115, 64, H3() ELSE PUTC 115, 64, H4()
IF DEATH = 1 AND NOMOV >= 20 THEN FOR E = 1 TO 31: PAL E, NOMOV - 20, 0, 0: NEXT E
GOTO DWN
END IF
IF SM = 1 THEN
 IF SN = 0 THEN
 IF T1 <> 0 OR J <> 0 THEN PUTC 115, 60, J1() ELSE IF T > -6 THEN PUTC 115, 64, R1() ELSE PUTC 115, 64, ZR1()
 ELSE
 IF T1 <> 0 OR J <> 0 THEN PUTC 115, 60, J2() ELSE IF T > -6 THEN PUTC 115, 64, R2() ELSE PUTC 115, 64, ZR2()
 END IF
END IF

IF SM = 0 THEN
 IF SN = 0 THEN
 IF T1 <> 0 OR J <> 0 THEN PUTC 115, 60, J1() ELSE IF T < 6 THEN PUTC 115, 64, L1() ELSE PUTC 115, 64, ZL1()
 ELSE
 IF T1 <> 0 OR J <> 0 THEN PUTC 115, 60, J2() ELSE IF T < 6 THEN PUTC 115, 64, L2() ELSE PUTC 115, 64, ZL2()
 END IF
END IF
DWN:
IF J = -1 THEN J = 0
END IF
END IF
TX = TX + 1
NEXT X: TY = TY + 1: NEXT Y
IF Z = 51 THEN LV(SY + 4, SX + 7) = 60:  coin = coin + 1: DISPLAY: PLAY "MBT255L64O3CDEFAB"
IF Z = 8 OR ZD = 8 THEN ITONA = ITONA + 1: T = 10: T1 = FR: PLAY "MBL64T255O1CDCDO2CDEFAO3CDACO2CDCO1CDC": IF ITONA = 3 THEN LV(35, 82) = 11: IF ITONB = 3 THEN KILLIT = 1
IF Z = 9 OR ZD = 9 THEN ITONB = ITONB + 1: T = -10: T1 = FR: PLAY "MBL64T255O1CDCDO2CDEFAO3CDACO2CDCO1CDC": IF ITONB = 3 THEN LV(35, 83) = 12: IF ITONA = 3 THEN KILLIT = 1

IF ZD = 51 AND Z <> 51 THEN
IF C1 = 0 THEN LV(SY + 5, SX + 7) = 60 ELSE LV(SY + 4, SX + 7) = 60
 coin = coin + 1: DISPLAY: PLAY "MBT255L64O3CDEFAB"
END IF
IF LCO > 0 THEN
LCO = LCO - 1
IF LCO > 39 THEN
FOR E = 1 TO 7
IF LV(ECY(E), ECX(E)) <> 51 THEN EC(E) = 0
IF EC(E) = 1 THEN
LV(ECY(E), ECX(E)) = 60: ECX(E) = ECX(E) + IX(E): ECY(E) = ECY(E) + IY(E)
IF LV(ECY(E), ECX(E)) <> 60 AND LV(ECY(E), ECX(E)) <> 51 THEN ECY(E) = ECY(E) - IY(E): ECX(E) = ECX(E) - IX(E) ': EC(E) = 0
LV(ECY(E), ECX(E)) = 51
END IF
NEXT E
ELSE
IF LCO > 17 THEN
FOR E = 1 TO 7
IF LV(ECY(E), ECX(E)) <> 51 THEN EC(E) = 0
IF EC(E) = 1 THEN
LV(ECY(E), ECX(E)) = 60':  ECY(E) = ECY(E) + 1
IF LV(ECY(E), ECX(E)) <> 60 AND LV(ECY(E), ECX(E)) <> 51 THEN ECY(E) = ECY(E) - IY(E): ECX(E) = ECX(E) - IX(E)': EC(E) = 0
LV(ECY(E), ECX(E)) = 51
END IF
NEXT E
ELSE
FOR E = 1 TO 7
IF LV(ECY(E), ECX(E)) <> 51 THEN EC(E) = 0
IF EC(E) = 1 THEN
LV(ECY(E), ECX(E)) = 60:  ECY(E) = ECY(E) + 1
IF LV(ECY(E), ECX(E)) <> 60 AND LV(ECY(E), ECX(E)) <> 51 THEN ECY(E) = ECY(E) - 1 ': EC(E) = 0
LV(ECY(E), ECX(E)) = 51: IF LCO = 0 THEN LV(ECY(E), ECX(E)) = 60
END IF
NEXT E
END IF
END IF
END IF
IF Z = 99 AND EXL = 0 THEN EXL = 67: EDX = SX ELSE IF Z = 87 AND EXL = 0 THEN EXL = 67: SOUND 0, 0: PLAY "L30T255MBO1CCO2CCO1GO2GO3GO4CCC<CCC>CCC": LV(EAY + 1, EAX) = 60: LV(EAY, EAX) = 60
IF (Z = 70 OR ZD = 70 OR Z > 600 OR Z = 50 OR Z = 5 OR Z = 3 OR ZD = 50 OR ZD = 5 OR ZD = 3 OR Z = 80 OR Z = 81 OR ZD = 81) AND NODI = 0 THEN GOSUB DII
IF Z = 64 THEN
LV(SY + 4, SX + 7) = 65
IF (SY + 4) = 32 AND (SX + 7) = 99 THEN FOR E = 9 TO 11: LV(19, E) = 60: NEXT E
IF (SY + 4) = 23 AND (SX + 7) = 9 THEN FOR E = 131 TO 134: LV(23, E) = 60: NEXT E
IF (SY + 4) = 18 AND (SX + 7) = 41 THEN LV(10, 46) = 1
IF (SY + 4) = 7 AND (SX + 7) = 55 THEN LV(10, 12) = 64: LV(11, 12) = 2: LV(10, 11) = 6
IF (SY + 4) = 10 AND (SX + 7) = 12 THEN LV(15, 33) = 64: LV(15, 32) = 6: LV(17, 33) = 2
IF (SY + 4) = 15 AND (SX + 7) = 33 THEN LV(7, 21) = 60: LV(6, 21) = 60
PLAY "O0CDCDCDO1CO2CO3CDEAB"
END IF
IF EXL > 0 THEN
EXL = EXL - 2: IF EXL < 0 THEN EXL = 0
FOR E = 1 TO 255: PALD E: NEXT E
IF EXL = 0 THEN GOTO NXL
END IF
IF NOMOV = 0 AND DEATH = 1 THEN GOTO DETH
IF I$ = CHR$(27) THEN IF LEV = 0 THEN GOTO ext ELSE CLOSE : OPEN "~~~~.TMP" FOR OUTPUT AS #1: CLOSE : RUN
LOOP
SLEEP
END
DII:
IF coin = 0 THEN NODI = 50: NOMOV = 40: DEATH = 1: MNB = 1: IF LV(SY + 4, SX + 7) = 60 AND LEV <> 4 THEN BLC(1) = 1: BLY(1) = SY + 4: BLX(1) = SX + 7: LV(SY + 4, SX + 7) = 60
IF coin > 0 THEN
BCN = coin: MNB = 1: IF LV(SY + 4, SX + 7) = 60 AND LEV <> 4 THEN BLC(1) = 1: BLY(1) = SY + 4: BLX(1) = SX + 7: LV(SY + 4, SX + 7) = 60
coin = coin - (INT(RND * 20) + 10): IF coin < 0 THEN coin = 0
NODI = 46: NOMOV = 20: PLAY "MBCDEDO0CDCDCDCDCCCCCC"
BCN = BCN - coin
II = INT(RND * 5) + 1
IF II = 1 THEN RESTORE 1 ELSE IF II = 2 THEN RESTORE 2 ELSE IF II = 3 THEN RESTORE 3 ELSE IF II = 4 THEN RESTORE 4 ELSE IF II = 5 THEN RESTORE 5
LCO = 42
FOR E = 1 TO 7
READ EX, EY, K1, K2: EX = (SX + 7) + EX: EY = (SY + 4) + EY
IF (LV(EY, EX) = 60 OR LV(EY, EX) = 51) AND BCN > 0 THEN
BCN = BCN - 1
EC(E) = 1: ECX(E) = EX: ECY(E) = EY: IX(E) = K1: IY(E) = K2
LV(EY, EX) = 51
ELSE
EC(E) = 0
END IF
NEXT E
END IF
DISPLAY
RETURN
1 DATA 0,-3,0,-1
2 DATA -1,-1,-1,-1
3 DATA -2,0,-1,0
4 DATA 1,-1,1,-1
5 DATA 2,0,1,0
DATA -2,-3,0,-1
DATA 2,-3,0,-1
DATA -2,0,-1,0
DATA 2,0,1,0
DATA 0,-3,0,-1
DATA -1,-1,-1,-1
DATA 1,-1,1,-1
DATA -2,-3,0,-1
DATA 2,-3,0,-1


DETH:
PLAY "MBL40T255O3EEEO1EEEO3EEEO1EEEO3EEEO1EEEO3DDDO1DDDO3E-E-E-O1E-E-E-O3DDDO1DDDO3CCCO1CCCO2BGDO1BGDO0BGC ": SLEEP 1
LIFE = LIFE - 1
IF LIFE = 0 THEN
CLS : CLOSE : OPEN "~~~~.TMP" FOR OUTPUT AS #1: CLOSE
OPEN "TP.DAT" FOR INPUT AS #1: INPUT #1, A$: INPUT #1, A: CLOSE
IF LEV >= A THEN TOPPLAY LEV
RUN
END IF
DEATH = 0: NOMOV = 0: coin = 0: J = 0
GOTO TRYAG

NXL:
CLS
IF LEV = 0 THEN
SELECT CASE EDX
CASE 1 TO 4         '12345678901234567890
I$ = INKEY$: LEV = 1: GOTO DOOP
CASE 6 TO 8
CLS
COLOR 15
LOCATE 10, 5: PRINT "Enter the code and forever hold"
LOCATE 12, 5: PRINT "          your peace!          "
PALETTE: GETWORD 14, 16, 10, C$: C$ = LTRIM$(RTRIM$(C$))
SLEEP 2
COLOR 9
IF C$ = "SWORDFISH" THEN LEV = 4: FOR E = 1 TO 254: PAL E, 0, 0, 0: NEXT E: PAL 255, 60, 60, 60: COLOR 255: LOCATE 13, 8: PRINT "Warping Dude!  Loading...": GOTO DOOP
IF C$ = "WIRE STRIP" THEN LEV = 5: FOR E = 1 TO 254: PAL E, 0, 0, 0: NEXT E: PAL 255, 60, 60, 60: COLOR 255: LOCATE 13, 8: PRINT "Warping Dude!  Loading...": GOTO DOOP
IF C$ = "IN TROUBLE" THEN LEV = 6: FOR E = 1 TO 254: PAL E, 0, 0, 0: NEXT E: PAL 255, 60, 60, 60: COLOR 255: LOCATE 13, 8: PRINT "Warping Dude!  Loading...": GOTO DOOP
IF C$ = "TEXT" THEN LEV = 8: FOR E = 1 TO 254: PAL E, 0, 0, 0: NEXT E: PAL 255, 60, 60, 60: COLOR 255: LOCATE 13, 8: PRINT "Warping Dude!  Loading...": GOTO DOOP

COLOR 9: LOCATE 16, 5: PRINT "  What are you tring to pull?  "
SLEEP 3
GOTO TRYAG

CASE 10 TO 12
CLS : BLOAD "HELP.DAT": PALETTE: SLEEP: GOTO TRYAG
CASE 14 TO 16
TOPPLAY 0: GOTO TRYAG
CASE 18 TO 21
GOTO ext
END SELECT
END IF
PAL 1, 63, 63, 63
COLOR 1
FOR X = 1 TO 14: LOCATE 9, X: PRINT " L e v e l": PAUS: NEXT X
FOR X = 36 TO 18 STEP -2: LOCATE 11, X: PRINT LEV; " ": PAUS: NEXT X
PAL 2, 63, 10, 10
PAL 0, 63, 10, 10
COLOR 2: LOCATE 13, 13: PRINT " P a s s e d"
IF LEV = 3 THEN LOCATE 18, 13: PRINT "  SWORDFISH ": LOCATE 16, 13: PRINT "    Code:   "
IF LEV = 4 THEN LOCATE 18, 13: PRINT "  WIRE STRIP ": LOCATE 16, 13: PRINT "    Code:   "
IF LEV = 5 THEN LOCATE 18, 13: PRINT "  IN TROUBLE ": LOCATE 16, 13: PRINT "    Code:   "
FOR T = 1 TO 64
PALD 0
PAUS
NEXT T
LEV = LEV + 1: MNB = 0: FR = 8: TT = 9
DOOP:
IF LEV = 4 THEN BACKF$ = "BACKF4.QPC": SPRITE$ = "SPRITES4.QPC": BLUD$ = "BUBBLE.QPC": GOSUB NSTUFF: MNB = 1: TBLD = 3: FR = 4: TT = 7
IF LEV = 5 OR LEV = 6 OR LEV = 7 THEN BACKF$ = "BACKF5.QPC": SPRITE$ = "SPRITES.QPC": BLUD$ = "BLOOD.QPC": GOSUB NSTUFF
IF LEV < 9 THEN GOTO TRYAG

ext:
SCREEN 0: WIDTH 80
CLS
COLOR 9
PRINT "I hope you enjoyed this SHAREWARE BETA 2.5 version!!"
PRINT
CLOSE : OPEN "~~~~.TMP" FOR OUTPUT AS #1: CLOSE
COLOR 2
PRINT "Be sure to tell me if it's too hard/easy...! :)": IF LEV < 6 THEN END
PRINT : COLOR 9
END
NSTUFF:
CLOSE
OPEN BACKF$ FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, B1()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, B2()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, B3()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, B4()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, B5()
    IF ZZ = 6 THEN GETS 1, 1, 16, 16, BE()
    IF ZZ = 7 THEN GETS 1, 1, 16, 16, BG()
    IF ZZ = 8 THEN GETS 1, 1, 16, 16, BGB()
    'IF ZZ = 9 THEN GETS 1, 1, 16, 16, BH()
    IF ZZ = 10 THEN GETS 1, 1, 16, 16, BW()
    NEXT ZZ

CLOSE
OPEN SPRITE$ FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    IF ZZ = 12 OR ZZ = 13 THEN IF LEV = 5 OR LEV = 6 OR LEV = 7 THEN PT 1, 1, BG()
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    IF (LEV <> 5 AND LEV <> 6 AND LEV <> 7) OR ((LEV = 5 OR LEV = 6 OR LEV = 7) AND ZZ <> 12 AND ZZ <> 13) THEN PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    IF (LEV = 5 OR LEV = 6 OR LEV = 7) AND (ZZ = 12 OR ZZ = 13) THEN IF ASC(MID$(D$, CT, 1)) - 49 < 170 THEN PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, R1()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, R2()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, L1()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, L2()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, J1()
    IF ZZ = 6 THEN GETS 1, 1, 16, 16, J2()
    IF ZZ = 7 THEN GETS 1, 1, 16, 16, ZR1()
    IF ZZ = 8 THEN GETS 1, 1, 16, 16, ZR2()
    IF ZZ = 9 THEN GETS 1, 1, 16, 16, ZL1()
    IF ZZ = 10 THEN GETS 1, 1, 16, 16, ZL2()
    IF ZZ = 11 THEN GETS 1, 1, 16, 16, BS()
    IF ZZ = 12 THEN GETS 1, 1, 16, 16, BO()
    IF ZZ = 13 THEN GETS 1, 1, 16, 16, BI()
    IF ZZ = 14 THEN GETS 1, 1, 16, 16, BD()
    IF ZZ = 15 THEN GETS 1, 1, 16, 16, H1()
    IF ZZ = 16 THEN GETS 1, 1, 16, 16, H2()
    IF ZZ = 17 THEN GETS 1, 1, 16, 16, H3()
    IF ZZ = 18 THEN GETS 1, 1, 16, 16, H4()
    NEXT ZZ
CLOSE
OPEN BLUD$ FOR INPUT AS #1
INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF
CT = 0: D$ = "": INPUT #1, D$
    IF LEV = 5 OR LEV = 6 OR LEV = 7 THEN PT 1, 1, BG()
    FOR TTX = 1 TO W: FOR TTY = 1 TO H
    CT = CT + 1
    IF (LEV <> 5 AND LEV <> 6 AND LEV <> 7) THEN PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49 ELSE IF ASC(MID$(D$, CT, 1)) - 49 < 170 THEN PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY
    NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, BL1()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, BL2()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, BL3()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, BL4()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, BL5()
    IF ZZ = 6 THEN GETS 1, 1, 16, 16, BL6()
    NEXT ZZ

CLOSE

RETURN

INTERM:
D = 258
CLOSE
REDIM E1(D), E2(D), E3(D), E4(D), E5(D), E6(D)
SCREEN 13: CLS : FOR E = 0 TO 255: PAL E, 0, 0, 0: NEXT E
OPEN "IEYE1.QPC" FOR INPUT AS #1: INPUT #1, H: INPUT #1, W: INPUT #1, A
FOR ZZ = 1 TO A: LINE (1, 1)-(W, H), 0, BF: CT = 0: D$ = "": INPUT #1, D$
    FOR TTX = 1 TO W: FOR TTY = 1 TO H: CT = CT + 1
    IF ASC(MID$(D$, CT, 1)) - 49 = 8 THEN MID$(D$, CT, 1) = CHR$(49)
    PSET (TTX, TTY), ASC(MID$(D$, CT, 1)) - 49
    NEXT TTY: NEXT TTX
    IF ZZ = 1 THEN GETS 1, 1, 16, 16, E1()
    IF ZZ = 2 THEN GETS 1, 1, 16, 16, E2()
    IF ZZ = 3 THEN GETS 1, 1, 16, 16, E3()
    IF ZZ = 4 THEN GETS 1, 1, 16, 16, E4()
    IF ZZ = 5 THEN GETS 1, 1, 16, 16, E5()
    IF ZZ = 6 THEN GETS 1, 1, 16, 16, E6()
    NEXT ZZ
CLOSE
CLS
PALETTE
CT = 0
DOIT:
DO
CT = CT + 1

DEF SEG = 0: POKE (1132), 0
DO: LOOP WHILE PEEK(1132) < 2
DEF SEG = &HA000


SELECT CASE CT
CASE 1 TO 6, 10 TO 17, 28, 40, 51 TO 70, 74, 92, 94, 96, 98, 100
PT 60, 114, E1()
CASE 7 TO 9, 71 TO 73
PT 60, 114, E2()
CASE 18 TO 27, 41 TO 50
PT 60, 114, E3()
CASE 29 TO 39
PT 60, 114, E4()
CASE 75 TO 90
PT 60, 114, E5()
CASE 91, 93, 95, 97, 99
PT 60, 114, E6()
CASE 101
FOR E = 0 TO 13: PAL E, 63, 63, 63: NEXT E: FOR E = 15 TO 255: PAL E, 63, 63, 63: NEXT E
CASE 104
BLOAD "COOL.DAT"
CASE 106
PALETTE
END SELECT
LOOP UNTIL CT = 130




'   # 1   5    10   15   20   25   30   35   40
'                                            |

DATA "Thankyou for destroying the cyber"
DATA "reactor and setting me free from"
DATA "my bondage!  "
DATA "-"
DATA "Say whaaat?  "
DATA "-"
DATA "I am truely grateful for your help.  "
DATA "-"
DATA "What help?  I don't know YOU!  "
DATA "-"
DATA "You destroyed the main electrical"
DATA "reactor that held me captive.  "
DATA "-"
DATA "Oh..Who are you anywayzz?  "
DATA "-"
DATA "I am....um..aaaa...geez!"
DATA "I've been in here so long I DON'T"
DATA "REMEMBER!  "
DATA "-"
DATA "I'll just call you Bob.  "
DATA "-"
DATA "Good enough.  Since you have rescued"
DATA "me, I will give you a PoWeRuP, for the"
DATA "following levels are not easy.  If"
DATA "you press [I] while playing, you will"
DATA "be invinsible for 15 seconds!  "
DATA "-"
DATA "Thanks old man, err, whatever you are!"
DATA "  "
DATA "-"
DATA "No problem.  Just rememer....you can"
DATA "only use it ONCE.  Good luck!!  "
DATA "END"
RESTORE INTERM: K = 51: INVIN = 1
DIM BOX(8170)
GET (0, 60)-(319, 100), BOX
TY = 60
DO
IF K = 51 THEN K = 40 ELSE K = 51
DO
READ T$
TEXT T$, 8 * (20 - (LEN(T$) / 2)) - 1, TY, K
TY = TY + 8
LOOP UNTIL INSTR(T$, "") > 0
READ T$: IF K = 40 THEN LINE (0, 150)-(319, 199), 0, BF: TY = 150 ELSE PUT (0, 60), BOX, PSET: TY = 60
SLEEP
LOOP UNTIL INSTR(T$, "END") > 0
GOTO ext

SUB CYCLE
OUT &H3C7, 164
BC1 = INP(&H3C9)
BC2 = INP(&H3C9)
BC3 = INP(&H3C9)
FOR E = 164 TO 161 STEP -1
OUT &H3C7, E - 1
C1 = INP(&H3C9)
C2 = INP(&H3C9)
C3 = INP(&H3C9)
OUT &H3C8, E: OUT &H3C9, C1: OUT &H3C9, C2: OUT &H3C9, C3
NEXT E
OUT &H3C8, 160: OUT &H3C9, BC1: OUT &H3C9, BC2: OUT &H3C9, BC3
END SUB

SUB DISPLAY
COLOR 9: LOCATE 7, 33
IF coin > 99 THEN coin = coin - 100: PLAY "MBO3CDEFGABO4CDCDCCDCDCDCDCDCDCDCDCDCDC": LIFE = LIFE + 1
IF coin < 10 THEN PRINT " "; coin; "" ELSE PRINT coin
COLOR 2: LOCATE 15, 33: PRINT " "; LIFE
END SUB

SUB GETS (X1, Y1, X2, Y2, S())
S(1) = X2 - X1: S(2) = Y2 - Y1
CT = 2
FOR Y = Y1 TO Y2: FOR X = X1 TO X2: CT = CT + 1: S(CT) = POINT(X, Y): NEXT X, Y
END SUB

SUB GETWORD (Y, X, CT, C$)
COLOR 8: LOCATE Y, X: FOR E = 1 TO CT: PRINT "Û"; : NEXT E
LOCATE Y, X: COLOR 14: PRINT "Û": C = X: C$ = ""

FOR E = 1 TO 15: I$ = INKEY$: NEXT E: I$ = ""
DO
I$ = INPUT$(1): I$ = UCASE$(I$)
IF (I$ = " " OR (ASC(I$) > 64 AND ASC(I$) < 91)) AND LEN(C$) < CT THEN C$ = C$ + I$: LOCATE Y, C: COLOR 12: PRINT I$: C = C + 1
IF I$ = CHR$(8) AND C > X THEN COLOR 8: LOCATE Y, C: PRINT "Û": C = C - 1: C$ = MID$(C$, 1, LEN(C$) - 1)
IF LEN(C$) < CT THEN LOCATE Y, C: COLOR 14: PRINT "Û"
LOOP UNTIL LEN(C$) = CT OR I$ = CHR$(13)
IF I$ = CHR$(13) THEN LOCATE Y, C: COLOR 8: PRINT "Û"
END SUB

SUB OPN (F$)
CLOSE
OPEN F$ FOR BINARY AS #1
OPEN "~~~~.TMP" FOR OUTPUT AS #2: CLOSE #2: KILL "~~~~.TMP"
OPEN "~~~~.TMP" FOR BINARY AS #2
C$ = SPACE$(LOF(1))
GET #1, , C$
FOR T = 1 TO LOF(1)
MID$(C$, T, 1) = CHR$(ASC(MID$(C$, T, 1)) + 10)
NEXT T
PUT #2, , C$
CLOSE
OPEN "~~~~.TMP" FOR INPUT AS #1
C$ = ""
END SUB

SUB PAL (C, C1, C2, C3)
OUT &H3C8, C
OUT &H3C9, C1: OUT &H3C9, C2: OUT &H3C9, C3
END SUB

SUB PALD (C)
OUT &H3C7, C
C1 = INP(&H3C9): IF C1 > 0 THEN C1 = C1 - 4: IF C1 < 0 THEN C1 = 0
C2 = INP(&H3C9): IF C2 > 0 THEN C2 = C2 - 4:  IF C2 < 0 THEN C2 = 0
C3 = INP(&H3C9): IF C3 > 0 THEN C3 = C3 - 4:  IF C3 < 0 THEN C3 = 0
OUT &H3C8, C: OUT &H3C9, C1: OUT &H3C9, C2: OUT &H3C9, C3
END SUB

SUB PAUS
DEF SEG = 0
POKE (1132), 0  'reset timer again
T:

IF PEEK(1132) < 1 THEN GOTO T  'If not enough time was passed goto T
DEF SEG = &HA000
END SUB

SUB PT (X1, Y1, S())
CT = 2: SY = 320 * Y1
FOR Y = Y1 TO Y1 + S(2): FOR X = X1 TO X1 + S(1): CT = CT + 1: POKE (SY + X), S(CT): NEXT X: SY = SY + 320: NEXT Y
END SUB

SUB PUTB (X1, Y1)
SY = 320 * Y1
FOR Y = Y1 TO Y1 + 15: FOR X = X1 TO X1 + 15:
IF X > 14 AND X < 224 AND Y > 15 AND Y < 128 THEN POKE (SY + X), 0
NEXT X: SY = SY + 320: NEXT Y
END SUB

SUB PUTC (X1, Y1, S())
CT = 2: SY = 320 * Y1
FOR Y = Y1 TO Y1 + S(2): FOR X = X1 TO X1 + S(1): CT = CT + 1:
IF S(CT) > 0 THEN POKE (SY + X), S(CT)
NEXT X: SY = SY + 320: NEXT Y
END SUB

SUB PUTS (X1, Y1, S())
CT = 2: SY = 320 * Y1
FOR Y = Y1 TO Y1 + S(2): FOR X = X1 TO X1 + S(1): CT = CT + 1
IF X > 14 AND X < 224 AND Y > 15 AND Y < 128 THEN POKE (SY + X), S(CT)
NEXT X: SY = SY + 320: NEXT Y
END SUB

SUB TEXT (A$, X, Y, SC)
DEF SEG = &HA000: FOR E = 1 TO 15: I$ = INKEY$: NEXT
FOR E = 1 TO LEN(A$)
COLOR 16: LOCATE 1, 1: PRINT MID$(A$, E, 1)
FOR TY = 0 TO 7
FOR TX = 0 TO 8
IF PEEK(320 * TY + TX) = 16 THEN POKE (320 * (Y + TY) + X + TX), SC + TY
NEXT TX, TY
X = X + 8: IF X > 312 THEN X = 0: Y = Y + 8
IF NBP = 0 THEN PAUS: IF INKEY$ <> "" THEN NBP = 1
NEXT E
END SUB

SUB TOPPLAY (A)
CLS
LINE (0, 0)-(319, 0), 2: LINE (0, 0)-(0, 199), 2
LINE (1, 199)-(319, 199), 1: LINE -(319, 1), 1
COLOR 1: LOCATE 2, 12: PRINT "-=The TOP Player=-"
LOCATE 6, 2: PRINT "Name                     Level Reached"
LINE (5, 50)-(314, 50), 1: LINE (5, 51)-(314, 51), 2
IF A = 0 THEN
CLOSE : OPEN "TP.DAT" FOR INPUT AS #1: INPUT #1, NM$, LV: CLOSE
COLOR 14: LOCATE 9, 2: PRINT NM$: LOCATE 9, 26: PRINT LV
END IF
PALETTE
PAL 1, 20, 20, 20
PAL 0, 30, 30, 30
PAL 2, 40, 40, 40

IF A > 0 THEN
LOCATE 9, 26: COLOR 12: PRINT A
GETWORD 9, 2, 15, C$
CLOSE : OPEN "TP.DAT" FOR OUTPUT AS #1: PRINT #1, C$: PRINT #1, A: CLOSE
LOCATE 9, 2: PRINT "                                      "
COLOR 14: LOCATE 9, 2: PRINT C$: LOCATE 9, 26: PRINT A
END IF

SLEEP
END SUB

